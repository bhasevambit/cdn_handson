AWSTemplateFormatVersion: "2010-09-09"
Description: This template makes VPC.

Parameters:
#Workshop Name
  EnvironmentName:
    Type: String
    Default: workshop

#IAM Policy
  awsExampleManagedPolicyParameterOne:
    Type: String
    Default: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Description: ARN of the first IAM Managed Policy to add to the role

#VPC
  VpcCIDR:
    Description: IP range for VPC
    Type: String
    Default: 192.168.0.0/16 

#Subnets
  PublicSubnet1:
    Description: the IP range for the public subnet in the first Availability Zone
    Type: String
    Default: 192.168.1.0/24
  PublicSubnet2:
    Description: the IP range for the public subnet in the second Availability Zone
    Type: String
    Default: 192.168.2.0/24    

Resources:
#VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

#IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

#PubSub
  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

#Route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet2

#IAM Role
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref awsExampleManagedPolicyParameterOne

#Instance Proifile
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RootRole

#SG
  HTTPSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
            GroupDescription: webserver
            GroupName: !Sub ${EnvironmentName}-webserver
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            VpcId: !Ref VPC
  SGloadbalancer:
      Type: AWS::EC2::SecurityGroup
      Properties:
            GroupDescription: load-balancer
            GroupName: !Sub ${EnvironmentName}-load-balancer
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            VpcId: !Ref VPC

#EC2
  MyEC2Instance:
      Type: AWS::EC2::Instance
      Properties:
            ImageId: ami-02c3627b04781eada
            InstanceType: t2.micro
            SecurityGroupIds:
                - !Ref HTTPSecurityGroup
            SubnetId:
                 !Ref PubSubnet1
            IamInstanceProfile:
                  !Ref SSMInstanceProfile
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName}-WebServer
            UserData: !Base64 |
                #!/bin/bash
                yum upgrade -y
                yum update -y
                yum install httpd -y
                systemctl start httpd
                systemctl enable httpd
                chown ec2-user:ec2-user /var/www/html
                cat <<'EOF' > /var/www/html/index.html
                <html>
                <head>
                <title>HandsOn</title>
                </head>
                <body>
                <h1>HandsOn</h1>
                <p>Filename: clock.png<br /><img src="/clock.png" /></p>
                <p>Filename: clock-no-cache.png<br /><img src="/clock-no-cache.png" /></p>
                </body>
                </html>
                EOF
                yum install ImageMagick -y
                cat <<'EOF' > /home/ec2-user/generate-image.sh
                #!/bin/sh
                convert -pointsize 24 -size 100x25 -gravity south -background black -fill white "label:$(echo `date +%H:%M:%S`)" /var/www/html/clock.png
                convert -pointsize 24 -size 100x25 -gravity south -background black -fill white "label:$(echo `date +%H:%M:%S`)" /var/www/html/clock-no-cache.png
                EOF
                chmod 755 /home/ec2-user/generate-image.sh
                echo "* * * * * /home/ec2-user/generate-image.sh" | crontab

#ALB
  TargetGroup: 
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties: 
            Name: !Sub ${EnvironmentName}-cloudfront-ec2-tgt
            Protocol: HTTP
            Port: 80
            HealthCheckProtocol: HTTP
            HealthCheckPath: /
            HealthCheckPort: traffic-port
            Targets: 
                - Id: !Ref MyEC2Instance
                  Port: 80
            VpcId: 
               !Ref VPC
  InternetALB: 
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties: 
            Name: !Sub ${EnvironmentName}-cf-handson-alb
            Scheme: internet-facing
            LoadBalancerAttributes: 
                - Key: deletion_protection.enabled
                  Value: false
                - Key: idle_timeout.timeout_seconds
                  Value: 120
            SecurityGroups: 
                - !Ref SGloadbalancer
            Subnets: 
                - !Ref PubSubnet1
                - !Ref PubSubnet2
  ALBListenerHTTP: 
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties: 
          Port: 80
          Protocol: HTTP
          DefaultActions: 
            - Type: forward
              TargetGroupArn: !Ref TargetGroup
          LoadBalancerArn: !Ref InternetALB
#S3          
  AccessLogS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cloudfront-handson-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 's3:PutObject'
            Effect: Allow
            Principal: 
              AWS: 
                'arn:aws:iam::582318560864:root'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AccessLogS3Bucket
                - '/*'